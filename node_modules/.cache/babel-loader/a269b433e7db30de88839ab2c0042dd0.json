{"ast":null,"code":"var _jsxFileName = \"/Users/willhaight/Desktop/react/React-Chat-App/src/views/Chatroom/Chat.js\";\nimport React from \"react\";\nimport Nav from '../../components/Naviagtion/Navigation';\nimport '../Chatroom/Chat.css';\nimport { projectFirestore } from \"../../firebase/config\";\nimport { projectAuth } from \"../../firebase/config\";\nimport { timestamp } from \"../../firebase/config\";\nexport default function Chat() {\n  //pull messages and append\n  let count = 0;\n  let warned = false;\n\n  const update = async () => {\n    projectFirestore.collection(\"messages\").orderBy(\"time\", \"desc\").onSnapshot(res => {\n      document.getElementById('messageBoard').innerHTML = null;\n      res.docs.forEach(doc => {\n        count++;\n        document.getElementById('messageBoard').innerHTML += \"<p>\" + doc.data().author + \": \" + doc.data().wrote + \"</p>\";\n      });\n    });\n    console.log(count);\n\n    if (count > 10 && warned === false) {\n      warned = true;\n      await projectFirestore.collection('messages').add({\n        wrote: 'THE CHAT WILL BE CLEARED SOON',\n        author: 'SERVER_STATUS',\n        time: timestamp()\n      });\n    }\n\n    if (count > 25) {\n      projectFirestore.collection('messages').onSnapshot(res => {\n        res.docs.forEach(doc => {\n          console.log(doc.id);\n        });\n      });\n      warned = false;\n    }\n\n    count = 0;\n  };\n\n  update(); //write message\n\n  const writeMessage = async () => {\n    if (!projectAuth.currentUser) {\n      document.location.href = document.location.origin + \"/login\";\n    }\n\n    let writer = projectAuth.currentUser.email;\n    let message = {\n      wrote: document.getElementById('chatValue').value,\n      author: writer,\n      time: timestamp()\n    };\n    let error = null;\n\n    if (message.wrote && waiting === false) {\n      try {\n        await projectFirestore.collection('messages').add(message);\n        projectFirestore.collection('messages').orderBy('time');\n        document.getElementById('chatValue').value = null;\n        error = null;\n        document.getElementById('error').innerHTML = null;\n        update();\n        waitChange();\n        textWait();\n      } catch (err) {\n        console.log(err);\n        error = \"Could not send message. :(\";\n        document.getElementById('error').innerHTML = \"<p>\" + error + \"</p>\";\n      }\n    } else if (waiting === true) {\n      error = \"Wait 3 seconds in between sending messages\";\n      document.getElementById('error').innerHTML = \"<p>\" + error + \"</p>\";\n    } else {\n      error = \"Can't send an empty message.\";\n      document.getElementById('error').innerHTML = \"<p>\" + error + \"</p>\";\n    }\n  };\n\n  let waiting = false;\n\n  const textWait = () => {\n    setTimeout(waitChange, 3000);\n  };\n\n  function waitChange() {\n    waiting = !waiting;\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"nav-holder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(Nav, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"heading\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Welcome to the Chatroom\")), React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"messageBoard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"controlCenter\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    id: \"chatValue\",\n    placeholder: \"write a message...\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: writeMessage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Send\")), React.createElement(\"div\", {\n    className: \"chat-error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"error\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }))));\n}","map":{"version":3,"sources":["/Users/willhaight/Desktop/react/React-Chat-App/src/views/Chatroom/Chat.js"],"names":["React","Nav","projectFirestore","projectAuth","timestamp","Chat","count","warned","update","collection","orderBy","onSnapshot","res","document","getElementById","innerHTML","docs","forEach","doc","data","author","wrote","console","log","add","time","id","writeMessage","currentUser","location","href","origin","writer","email","message","value","error","waiting","waitChange","textWait","err","setTimeout"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Nav from '../../components/Naviagtion/Navigation'\nimport '../Chatroom/Chat.css'\nimport { projectFirestore } from \"../../firebase/config\";\nimport { projectAuth } from \"../../firebase/config\";\nimport { timestamp } from \"../../firebase/config\";\n\n\nexport default function Chat() {\n\n    //pull messages and append\n    let count = 0;\n    let warned = false;\n    const update = async () => {\n\n        projectFirestore.collection(\"messages\")\n            .orderBy(\"time\", \"desc\")\n            .onSnapshot((res) => {\n                document.getElementById('messageBoard').innerHTML = null\n                res.docs.forEach(doc => {\n                    count++\n                    document.getElementById('messageBoard').innerHTML += `<p>` + doc.data().author + `: ` + doc.data().wrote + `</p>`\n                })\n\n\n            });\n\n        console.log(count)\n        if (count > 10 && warned === false) {\n            warned = true\n            await projectFirestore.collection('messages').add(\n                { wrote: 'THE CHAT WILL BE CLEARED SOON', author: 'SERVER_STATUS', time: timestamp() }\n            )\n        }\n        if (count > 25) {\n            projectFirestore.collection('messages').onSnapshot((res) => {\n                res.docs.forEach(doc => {\n                    console.log(doc.id)\n                })\n            })\n            warned = false\n        }\n        count = 0;\n    }\n    update()\n\n\n    //write message\n    const writeMessage = async () => {\n        if (!projectAuth.currentUser) {\n            document.location.href = document.location.origin + \"/login\"\n        }\n        let writer = projectAuth.currentUser.email\n        let message = { wrote: document.getElementById('chatValue').value, author: writer, time: timestamp() }\n        let error = null;\n        if (message.wrote && waiting === false) {\n\n            try {\n                await projectFirestore.collection('messages').add(message)\n                projectFirestore.collection('messages').orderBy('time')\n                document.getElementById('chatValue').value = null\n                error = null\n                document.getElementById('error').innerHTML = null\n                update()\n                waitChange()\n                textWait()\n            } catch (err) {\n                console.log(err)\n                error = \"Could not send message. :(\"\n                document.getElementById('error').innerHTML = `<p>` + error + `</p>`\n            }\n        } else if (waiting === true) {\n            error = \"Wait 3 seconds in between sending messages\"\n            document.getElementById('error').innerHTML = `<p>` + error + `</p>`\n        } else {\n            error = \"Can't send an empty message.\"\n            document.getElementById('error').innerHTML = `<p>` + error + `</p>`\n        }\n    }\n    let waiting = false\n    const textWait = () => {\n        setTimeout(waitChange, 3000)\n    }\n    function waitChange() {\n        waiting = !waiting\n    }\n\n    return (\n        <div>\n            <div className=\"nav-holder\">\n                <Nav />\n            </div>\n            <div className=\"heading\">\n                <h1>Welcome to the Chatroom</h1>\n            </div>\n            <div className=\"content\">\n                <div id=\"messageBoard\">\n\n\n                </div>\n                <div className=\"controlCenter\">\n                    <input type=\"text\" id=\"chatValue\" placeholder=\"write a message...\"></input>\n\n                    <button onClick={writeMessage}>Send</button>\n\n                </div>\n                <div className=\"chat-error\">\n                    <div id=\"error\"></div>\n                </div>\n            </div>\n        </div>\n    );\n}"]},"metadata":{},"sourceType":"module"}